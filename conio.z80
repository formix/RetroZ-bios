#if !defined(CONIO_INIT)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                          RetroZ CONIO Library                           ;;
;;                                                                         ;;
;; Version: 0.5.1                                                          ;;
;; https://github.com/formix/RetroZ-bios                                   ;;
;; By J.P. Gravel <jeanphilippe.gravel@gmail.com>                          ;;
;; 2019-09-25                                                              ;;
;;                                                                         ;;
;; Console IO Library                                                      ;;
;; This library creates a 64 bytes buffer where characters are stored      ;;
;; using the PUTCHAR subroutine. Character are then available to be        ;;
;; fetched by GETCHAR. This library also declares a KEY_PRESSED to recieve ;;
;; characters emitted by other libraries like a serial IO library          ;;
;; (sio2.z80) or any other character generating library.                   ;;
;;                                                                         ;;
;; This library declares a set of subroutines to add or remove characters  ;;
;; from the character buffer and prints characters using the OUTA          ;;
;; subroutine from a basic IO libraru (like sio2.z80). Exposed subroutines ;;
;; are:                                                                    ;;
;;                                                                         ;;
;;  - CONIO_INIT: Initializes the library variables.                       ;;
;;  - PUTCHAR: Adds a charcater to the character buffer.                   ;;
;;  - GETCHAR: Gets a character from the character buffer.                 ;;
;;  - PRINT: Prints the zero terminated string recieved as param to OUTA.  ;;
;;  - CLS: Clears the screen                                               ;;
;;                                                                         ;;
;; The library also expose the following variable:                         ;;
;;                                                                         ;;
;;  - BUFFER_STATE (byte): Current state of the circular buffer, either    ;;
;;         BUFFER_FULL, BUFFER_READY or BUFFER_EMPTY.                      ;;
;;                                                                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;requires callstack.z80 included

BUFFER_MAX_LENGTH   EQU     64


#data           _HEAP
BUFFER          DEFS    BUFFER_MAX_LENGTH
BUFFER_TAIL     DEFS    2
BUFFER_LENGTH   DEFS    1



#code           _DATA
VT102_CLS       DEFB    27,"[0m",27,"[2J",0


#code           _MAIN
CONIO_INIT:
        LD      HL,BUFFER
        LD      (BUFFER_TAIL),HL
        SUB     A
        LD      (BUFFER_LENGTH),A
        RET


KEY_PRESSED:    _ADDRP  AF              ;Add AF as paremeter
                _CALL   PUTCHAR         ;Add the character to the buffer.
                RET

; ***************************************************************************
; Enqueue the character from the stack into the character buffer. This 
; subroutine should be called with interrupts disabled.
;       Input:  - The character (high byte), Don't care (low byte)
;       Return: Nothing
;       Flags:  Z is set if the buffer is full after the call
;               C is set if the call failed to add to the buf because it is
;               full.
; ***************************************************************************
PUTCHAR:        DI
                LD      A,(BUFFER_LENGTH)
                CP      BUFFER_MAX_LENGTH
                JR      C,_PUTCHAR_NOT_FULL
                SCF                     ;Sets the carry flag
                EI
                RET                     ;Returns with buffer full status (carry flag set).
_PUTCHAR_NOT_FULL:
                LD      E,A             ;Saves A (BUFFER_LENGTH) into E for later
                LD      HL,(BUFFER_TAIL);Loads the buffer head
                ADD     L               ;add the address low byte to the char count value.
                RES     6,A             ;modulo 64 !!! Works only if BUFFER address is div. by 64
                LD      L,A             ;HL is now at the tail of the circular buffer
                _GETP   BC,0            ;Get param 0 into BC.
                LD      A,C             ;Put the character from C into A.
                LD      (HL),A          ;Append the byte in the buffer.
                LD      A,E             ;E contains the buffer length (see above)
                INC     A               ;Increments the BUFFER_LENGTH variable
                LD      (BUFFER_LENGTH),A;BUFFER_LENGTH variable incremented.
                CP      BUFFER_MAX_LENGTH;Sets Z if the buffer is full.
                EI
                RET


; ***************************************************************************
; Dequeue one character from the circular buffer on the stack
;       Input:  - Nothing
;       Return: If the buffer was not empty:
;                   H = 1, L contains the character and Z is reset.
;               else:
;                   H = 0, L = 0 and Z is set.
; ***************************************************************************
GETCHAR:        DI
                LD      A,(BUFFER_LENGTH)
                OR      A               ;Checks if A == 0
                JR      NZ,_GETCHAR_NOT_EMPTY
                LD      H,A
                LD      L,A
                EI
                RET
_GETCHAR_NOT_EMPTY:
                LD      E,A             ;Saves A (the BUFFER_LENGTH) into E for later
                LD      HL,(BUFFER_TAIL)
                LD      A,(HL)
                LD      C,A             ;saves the characer into C
                INC     L
                RES     6,L             ;modulo 64 !!! Works only if BUFFER address is div. by 64
                LD      (BUFFER_TAIL),HL
                DEC     E               ;decrements the length
                LD      A,E
                LD      (BUFFER_LENGTH),A;Saves the new length into the variable.
                LD      H,1
                LD      L,C
                LD      A,1
                CP      A
                _RET_HL HL


; ***************************************************************************
; Dump the buffer content to the character output using OUTA. This is a 
; debug subroutine.
;       Input:  Nothing
;       Return: Nothing
; ***************************************************************************
DUMP_BUFFER:    LD      A,(BUFFER_LENGTH)
                OR      A
                RET     Z               ;If the buffer is empty, return.
                LD      HL,(BUFFER_TAIL);Make HL the buffer cursor
DUMP_BYTE:      LD      B,A             ;Loads the byte counter into B
                LD      A,(HL)          ;Load the character to print into A
                CALL    OUTA            ;Print the buffer byte
                INC     L               ;Move the cursor to then next byte
                RES     6,L             ;Modulo 64
                DEC     B
                RET     Z               ;Reached the end, return.
                JR      DUMP_BYTE       ;Print next byte

                
; ***************************************************************************
; Print end of line (\r\n)
; ***************************************************************************
PRINT_ENDL:     LD      A,10
                CALL    OUTA
                LD      A,13
                CALL    OUTA
                RET



; ***************************************************************************
; Clear the character buffer used by PUTCHAR and GETCHAR.
;       Input:  Nothing
;       Return: Nothing
; ***************************************************************************
CLEAR_CHAR_BUFFER:
    LD      HL,BUFFER
    LD      (BUFFER_TAIL),HL
    SUB     A                         ;A=0
    LD      (BUFFER_LENGTH),A
    RET

; ***************************************************************************
; Prints the NULL terminated string pointed by the parameter by calling
; OUTA. OUTA is expected to be implemented in another module.
;       Input: The NULL terminated string address.
;       Output: nothing.
; ***************************************************************************
PRINT:          _GETP   HL,0            ;Load the string address into HL.
_PRINT:         LD      A,(HL)          ;Reads the next character
                OR      A               ;Check if that character is null.
                RET     Z               ;If the null char is reached, exit.
                CALL    OUTA            ;Print the character and 
                INC     HL              ;move to the next char.
                JR      _PRINT          ;Print the next char


; ***************************************************************************
; Clear the screen and set the cursor home.
; ***************************************************************************
CLS:            LD      HL,VT102_CLS
                JR      _PRINT



#endif
