#if !defined(CONIO_INIT)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                          RetroZ CONIO Library                           ;;
;;                                                                         ;;
;; Version: 0.5.1                                                          ;;
;; https://github.com/formix/RetroZ-bios                                   ;;
;; By J.P. Gravel <jeanphilippe.gravel@gmail.com>                          ;;
;; 2019-09-25                                                              ;;
;;                                                                         ;;
;; Console IO Library                                                      ;;
;; This library creates a 64 bytes buffer where characters are stored      ;;
;; using the PUTCHAR subroutine. Character are then available to be        ;;
;; fetched by GETCHAR. This library also declares a KEY_PRESSED to recieve ;;
;; characters emitted by other libraries like a serial IO library          ;;
;; (sio2.z80) or any other character generating library.                   ;;
;;                                                                         ;;
;; This library declares a set of subroutines to add or remove characters  ;;
;; from the character buffer and prints characters using the OUTA          ;;
;; subroutine from a basic IO libraru (like sio2.z80). Exposed subroutines ;;
;; are:                                                                    ;;
;;                                                                         ;;
;;  - CONIO_INIT: Initializes the library variables.                       ;;
;;  - PUTCHAR: Adds a charcater to the character buffer.                   ;;
;;  - GETCHAR: Gets a character from the character buffer.                 ;;
;;  - PRINT: Prints the zero terminated string recieved as param to OUTA.  ;;
;;  - CLS: Clears the screen                                               ;;
;;                                                                         ;;
;; The library also expose the following variable:                         ;;
;;                                                                         ;;
;;  - BUFFER_STATE (byte): Current state of the circular buffer, either    ;;
;;         BUFFER_FULL, BUFFER_READY or BUFFER_EMPTY.                      ;;
;;                                                                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;requires callstack.z80 included

BUFFER_MAX_SIZE EQU     64


#data           _HEAP
BUFFER          DEFS    BUFFER_MAX_SIZE
BUFFER_HEAD     DEFS    2
BUFFER_TAIL     DEFS    2
BUFFER_SIZE     DEFS    1



#code           _DATA
VT102_CLS       DEFB    27,"[0m",27,"[2J",0


#code           _MAIN
CONIO_INIT:
    LD      HL,BUFFER
    LD      (BUFFER_HEAD),HL
    LD      (BUFFER_TAIL),HL
    LD      A,0
    LD      (BUFFER_SIZE),A
    RET


KEY_PRESSED:
    CALL    PUTCHAR
    LD      A,L
    OR      A
    RET     NZ              ; Successfully added to the char buffer
    LD      A,7             ; Emits a beep (BEL char) if failed to add to the char buffer.
    CALL    OUTA
    RET

; ***************************************************************************
; Puts a character from reg A in the console circular buffer.
; Inputs: Reg A, the character to add to the buffer.
; Return: L=0 if the method failed to add the caracter.
; Return: L=1 if the method succeeded to add the character to the buffer.
; Change: H,L,E
; ***************************************************************************
PUTCHAR:
    DI                          ; Disable interrupts
    LD      E,A                 ; Save A value
    LD      A,(BUFFER_SIZE)
    CP      BUFFER_MAX_SIZE     ; Check if the buffer is full
    LD      A,E                 ; Get A back
    LD      L,0                 ; Set failure flag
    EI                          ; Enable interrupts
    RET     Z                   ; Buffer full, we return
    LD      HL,(BUFFER_HEAD)
    LD      (HL),A              ; Add the character to the buffer head
    INC     HL                  ; Move the buffer head forward
    RES     6,L                 ; Modulo 64 given BUFFER address is divisible by 64
    LD      (BUFFER_HEAD),HL    ; Save the new BUFFER_HEAD
    LD      HL,BUFFER_SIZE
    INC     (HL)                ; Increment the buffer size by one
    LD      L,1                 ; Set success flag
    EI                          ; Enable interrupts
    RET


; ***************************************************************************
; Gets a character from the console circular buffer into A.
; Return: L=0, if the method failed to get a character in A (buffer empty).
; Return: L=1, if the method succeeded to get a character in A.
; Change: H,L,E
; ***************************************************************************
GETCHAR:
    LD      A,(BUFFER_SIZE)
    OR      A                   ; Check if the buffer is empty
    LD      L,A                 ; Set failure flag (if A contains 0, then L = 0, otherise we don't care)
    RET     Z                   ; Buffer empty, we return
    LD      HL,(BUFFER_TAIL)
    LD      A,(HL)              ; Get the character at the tail
    INC     L                   ; Move the buffer tail forward
    RES     6,L                 ; Modulo 64 given BUFFER address is divisible by 64
    LD      (BUFFER_TAIL),HL    ; Save the new BUFFER_TAIL
    LD      HL,BUFFER_SIZE
    DEC     (HL)                ; Decrement the buffer size by one
    LD      L,1                 ; Set success flag
    RET


; ***************************************************************************
; Dump the buffer content to the character output using OUTA. This is a 
; debug subroutine.
;       Input:  Nothing
;       Return: Nothing
; ***************************************************************************
DUMP_BUFFER:
    LD      A,(BUFFER_SIZE)
    LD      C,A
    XOR     A                   ; A = 0
    CP      C                   ; Check if C == 0
    LD      L,0                 ; Return failed
    RET     Z                   ; Return, nothing to print.
    LD      L,1                 ; Set success flag
    LD      DE,(BUFFER_TAIL)    ; Get the buffer tail
DUMP_BUFFER_PRINT:
    LD      A,(DE)              ; Get the character
    CALL    OUTA                ; Print the character
    DEC     C                   ; On character less to print
    RET     Z                   ; No more characters we are done.
    INC     E                   ; Move to the next char
    RES     6,E                 ; modulo 64
    JR      DUMP_BUFFER_PRINT

    
; ***************************************************************************
; Print end of line (\r\n)
; ***************************************************************************
PRINT_ENDL:     
    LD      A,10
    CALL    OUTA
    LD      A,13
    CALL    OUTA
    RET



; ***************************************************************************
; Clear the character buffer used by PUTCHAR and GETCHAR.
;       Input:  Nothing
;       Return: Nothing
; ***************************************************************************
CLEAR_CHAR_BUFFER:
    LD      HL,BUFFER
    LD      (BUFFER_HEAD),HL
    LD      (BUFFER_TAIL),HL
    SUB     A               ;A=0
    LD      (BUFFER_SIZE),A
    RET

; ***************************************************************************
; Prints the NULL terminated string pointed by the parameter by calling
; OUTA. OUTA is expected to be implemented in another module.
;       Input: The NULL terminated string address.
;       Output: nothing.
; ***************************************************************************
PRINT:          _GETP   HL,0            ;Load the string address into HL.
_PRINT:         LD      A,(HL)          ;Reads the next character
    OR      A               ;Check if that character is null.
    RET     Z               ;If the null char is reached, exit.
    CALL    OUTA            ;Print the character and 
    INC     HL              ;move to the next char.
    JR      _PRINT          ;Print the next char


; ***************************************************************************
; Clear the screen and set the cursor home.
; ***************************************************************************
CLS:            LD      HL,VT102_CLS
    JR      _PRINT



#endif
