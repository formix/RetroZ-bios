#if !defined(CONIO_INIT)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                          RetroZ CONIO Library                           ;;
;;                                                                         ;;
;; Version: 0.5.0                                                          ;;
;; https://github.com/formix/RetroZ-bios                                   ;;
;; By J.P. Gravel <jeanphilippe.gravel@gmail.com>                          ;;
;; 2019-09-25                                                              ;;
;;                                                                         ;;
;; Console IO Library                                                      ;;
;; This library creates a 64 bytes buffer where characters are stored      ;;
;; using the PUTCHAR subroutine. Character are then available to be        ;;
;; fetched by GETCHAR. This library also declares a KEY_PRESSED to recieve ;;
;; characters emitted by other libraries like a serial IO library          ;;
;; (sio2.z80) or any other character generating library.                   ;;
;;                                                                         ;;
;; This library declares a set of subroutines to add or remove characters  ;;
;; from the character buffer and prints characters using the OUTA          ;;
;; subroutine from a basic IO libraru (like sio2.z80). Exposed subroutines ;;
;; are:                                                                    ;;
;;                                                                         ;;
;;  - CONIO_INIT: Initializes the library variables.                       ;;
;;  - PUTCHAR: Adds a charcater to the character buffer.                   ;;
;;  - GETCHAR: Gets a character from the character buffer.                 ;;
;;  - PRINT: Prints the zero terminated string recieved as param to OUTA.  ;;
;;  - CLS: Clears the screen                                               ;;
;;                                                                         ;;
;; The library also expose the following variable:                         ;;
;;                                                                         ;;
;;  - BUFFER_STATE (byte): Current state of the circular buffer, either    ;;
;;         BUFFER_FULL, BUFFER_READY or BUFFER_EMPTY.                      ;;
;;                                                                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;requires callstack.z80 included

BUFFER_EMPTY    EQU     01000000b
BUFFER_READY    EQU     0
BUFFER_FULL     EQU     00000100b

#data           _HEAP
BUFFER          DEFS    64
BUFFER_HEAD     DEFS    2
BUFFER_TAIL     DEFS    2
BUFFER_STATE    DEFS    1

#code           _DATA
VT102_CLS       DEFB    27,"[0m",27,"[2J",0


#code           _MAIN
CONIO_INIT:
        LD      HL,BUFFER
        LD      (BUFFER_HEAD),HL
        LD      (BUFFER_TAIL),HL
        LD      A,BUFFER_EMPTY
        LD      (BUFFER_STATE),A
        RET


KEY_PRESSED:    _ADDRP  AF              ;Add AF as paremeter
                _CALL   PUTCHAR         ;Add the character to the buffer.
                RET                     ;Cannot use the JP trick with stack
                                        ;parameters.

; ***************************************************************************
; Enqueue the character from the stack into the character buffer. This 
; subroutine should be called with interrupts disabled.
;       Input:  - The character (high byte), Don't care (low byte)
;       Return: Nothing
;       Flags:  Z is set if the buffer is full after the call
;               C is set if the call failed to add to the buf because it is
;               full.
; ***************************************************************************
PUTCHAR:        LD      A,(BUFFER_STATE);Check if the buffer is full
                CP      BUFFER_FULL
                JR      NZ,DO_ENQUEUE   ;If the buffer is not full, DO_ENQUEUE
                CP      A               ;set the Z flag,
                RET                     ;and exit ***.
DO_ENQUEUE:     LD      HL,(BUFFER_HEAD);Load the buffer address into HL
                _GETP   DE,0            ;Get param 0 into DE
                LD      A,D             ;Put the character from D into A
                LD      (HL),A          ;Append the byte in the buffer
                LD      A,BUFFER_READY
                LD      (BUFFER_STATE),A;Buffer no longer empty here
                INC     L               ;Move the head forward
                RES     6,L             ;Modulo 64
                LD      (BUFFER_HEAD),HL;Save the new head value
                LD      A,(BUFFER_TAIL) ;Load tail index in A
                CP      L               ;Compare head and tail indices
                JP      NZ,BUF_NOT_FULL ;If the buffer is full 
                LD      A,BUFFER_FULL   
                LD      (BUFFER_STATE),A;then set the buffer state to FULL
BUF_NOT_FULL:   RET                     ;and exit ***.


; ***************************************************************************
; Dump the buffer content to the character output using OUTA. This is a 
; debug subroutine.
;       Input:  Nothing
;       Return: Nothing
; ***************************************************************************
DUMP_BUFFER:    LD      A,(BUFFER_STATE)
                CP      BUFFER_EMPTY
                RET     Z               ;If the buffer is empty, return.
                LD      HL,(BUFFER_TAIL);Make HL the buffer cursor
DUMP_BYTE:      LD      A,(HL)
                CALL    OUTA            ;Print the buffer byte
                INC     L               ;Move the cursor to then next byte
                RES     6,L             ;Modulo 64
                LD      A,(BUFFER_HEAD)
                CP      L               ;Check if cursor reached the head
                RET     Z               ;Reached the head, return.
                JR      DUMP_BYTE       ;Print next byte

                
; ***************************************************************************
; Print end of line (\r\n)
; ***************************************************************************
PRINT_ENDL:     LD      A,10
                CALL    OUTA
                LD      A,13
                CALL    OUTA
                RET


; ***************************************************************************
; Dequeue one character from the circular buffer on the stack
;       Input:  - Nothing
;       Return: Register L contains the character read from the buffer.
;               If the buffer was empty, L contains NULL and Z is set.
; ***************************************************************************
GETCHAR:        DI                      ;Disable interrupts during execution
                LD      A,(BUFFER_STATE);Check if the buffer is empty
                CP      BUFFER_EMPTY
                JR      NZ,DO_DEQUEUE   ;If the buffer is not empty, DO_DEQUEUE
                XOR     A               ;Else set the Z flag,
                LD      L,0             ;set the renurned character to null,
                EI                      ;enable interrupts before leaving
                RET                     ;and exit.
DO_DEQUEUE:     LD      HL,(BUFFER_TAIL);Load the buf tail address into HL
                LD      IY,(BUFFER_TAIL);and into IY
                INC     L               ;Move the tail forward
                RES     6,L             ;Modulo 64
                LD      (BUFFER_TAIL),HL;Save the new tail value
                LD      A,(BUFFER_HEAD) ;Load head index in A
                CP      L               ;Compare head and tail indices
                JP      NZ,BUF_NOT_EMPTY;If the buffer is not empty, jump. 
                LD      A,BUFFER_EMPTY  ;else 
                LD      (BUFFER_STATE),A;  set the buffer state to EMPTY.
BUF_NOT_EMPTY:  OR      A               ;Reset the Z flag.
                LD      L,(IY)          ;Return the character value into L.
                EI                      ;enable interrupts before leaving
                RET                     ;and exit ***.


; ***************************************************************************
; Prints the NULL terminated string pointed by the parameter by calling
; OUTA. OUTA is expected to be implemented in another module.
;       Input: The NULL terminated string address.
;       Output: nothing.
; ***************************************************************************
PRINT:          _GETP   HL,0            ;Load the string address into HL.
_PRINT:         LD      A,(HL)          ;Reads the next character
                OR      A               ;Check if that character is null.
                RET     Z               ;If the null char is reached, exit.
                CALL    OUTA            ;Print the character and 
                INC     HL              ;move to the next char.
                JR      _PRINT          ;Print the next char


; ***************************************************************************
; Clear the screen and set the cursor home.
; ***************************************************************************
CLS:            LD      HL,VT102_CLS
                JR      _PRINT



#endif
