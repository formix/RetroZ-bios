#if !defined(SIO2_INIT)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                          RetroZ SIO/2 Library                           ;;
;;                                                                         ;;
;; Version: 0.5.0                                                          ;;
;; https://github.com/formix/RetroZ-bios                                   ;;
;; Original source from Mario Blunk <marioblunk@arcor.de>                  ;;
;; http://www.train-z.de                                                   ;;
;; How To Program The Z80 Serial I/O (SIO) and CTC v2.1                    ;;
;; Adapted for the RetroZ-bios project by J.P. Gravel                      ;;
;; <jeanphilippe.gravel@gmail.com>.                                        ;;
;;                                                                         ;;
;; This library contains a set of subroutines to control the SIO/2 chip.   ;;
;; Exposed subroutines are:                                                ;;
;;                                                                         ;;
;;  - SIO2_INIT: Initialize serial port A with CTS/RTS hardware flow       ;;
;;               at 115200 bps. Initialize serial port B without flow      ;;
;;               control at 115200. Both are NO PARITY and 1 stop bit.     ;;
;;  - SIO_EI:    Enable data reception (RS on) on port A.                  ;;
;;  - SIO_DI:    Disable data reception (RS off) on port A.                ;;
;;  - RTS_OFF:   Tell the other device to stop sending data on port A.     ;;
;;  - RTS_ON:    Tell the other device it can send data on port A.         ;;
;;  - OUTC:      Send a byte over PORT A. Can block while the other party  ;;
;;               is not ready or if the previous byte is not done sending. ;;
;;                                                                         ;;
;;  Each byte recieved from PORT A triggers an interrupt that call the     ;;
;;  subroutine KEY_PRESSED with reg A containing the byte recieved. It is  ;;
;;  expected that another library implements the KEY_PRESSED event.        ;;
;;                                                                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SIOA_C          EQU     $00
SIOA_D          EQU     $01
SIOB_C          EQU     $02
SIOB_D          EQU     $03
 
#code           _INTERRUPTS
                DEFW    RX_CHA_AVAILABLE
                DEFW    SPEC_RX_CONDITION

#code           _MAIN
SIO2_INIT:
        ; SIOA init
	LD      A,$00            ; write 0
	OUT     (SIOA_C),A
	LD      A,$18            ; reset ext/status interrupts
	OUT     (SIOA_C),A

	LD      A,$04            ; write 4
	OUT     (SIOA_C),A
	LD      A,$C4            ; X64, no parity, 1 stop
	OUT     (SIOA_C),A

	LD      A,$01            ; write 1
	OUT     (SIOA_C),A
;	LD      A,$18            ; interrupt on all recv
        LD      A,$00            ; no interrupt on recv char
	OUT     (SIOA_C),A

	LD      A,$03            ; write 3
	OUT     (SIOA_C),A
	LD      A,$E1            ; 8 bits, auto enable, rcv enab
	OUT     (SIOA_C),A

	LD      A,$05           ; write 5
	OUT     (SIOA_C),A
	LD      A,$EA		; dtr enable, 8 bits, tx enable, rts
	OUT     (SIOA_C),A

        ; SIOB init
	LD      A,$00
	OUT     (SIOB_C),A
	LD      A,$18
	OUT     (SIOB_C),A

	LD      A,$04            ; write 4
	OUT     (SIOB_C),A
	LD      A,$C4            ; X64, no parity, 1 stop
	OUT     (SIOB_C),A

	LD      A,$01
	OUT     (SIOB_C),A
	LD      A,$18
	OUT     (SIOB_C),A

	LD      A,$02           ; write reg 2
	OUT     (SIOB_C),A
	LD      A,$0C           ; INTERRUPT VECTOR ADDRESS
	OUT     (SIOB_C),A

	LD      A,$03
	OUT     (SIOB_C),A
	LD      A,$E1
	OUT     (SIOB_C),A

	LD      A,$05
	OUT     (SIOB_C),A
	LD      A,$EA
	OUT     (SIOB_C),A

        CALL    INT_INIT

; ***** SIOA ENABLE INTERRUPTS *****
SIO_EI:
        LD      A, $03          ;write into WR0: select WR3
        OUT     (SIOA_C),A
        LD      A,$C1           ;RX 8bits, auto enable off, RX on
        OUT     (SIOA_C),A
        RET


; ***** SIOA DISABLE INTERRUPTS *****
SIO_DI:
        LD      A,$03           ;write into WR0: select WR3
        OUT     (SIOA_C),A
        LD      A,$C0           ;RX 8bit, auto enable off, RX off
        OUT     (SIOA_C),A
        RET


INT_INIT:
        LD      A,0
        LD      I,A             ;load I reg with zero
        IM      2               ;interrupt mode 2
        EI                      ;enable interrupts
        RET


RTS_OFF:
        LD      A,$05           ;write into WR0: select WR5
        OUT     (SIOA_C),A
        LD      A,$E8           ;DTR active, TX 8bit, BREAK off, TX on, RTS off
        OUT     (SIOA_C),A
        RET


RTS_ON:
        LD      A,$05           ;write into WR0: select WR5
        OUT     (SIOA_C),A
        LD      A,$EA           ;DTR active, TX 8bit, BREAK off, TX on, RTS on
        OUT     (SIOA_C),A
        RET

START_RX_INT:
	LD      A,$01            ; write 1
	OUT     (SIOA_C),A
	LD      A,$18            ; interrupt on all recv char
	OUT     (SIOA_C),A
        RET

STOP_RX_INT:
	LD      A,$01            ; write 1
	OUT     (SIOA_C),A
	LD      A,$00            ; no interrupt at all on recv char
	OUT     (SIOA_C),A
        RET

RX_CHA_AVAILABLE:
        DI
        EX      AF,AF'          ;backup AF
        EXX
WAIT_RX:
	SUB	A		;Clears A
	OUT	(SIOA_C),A	;Select RR0
	IN	A,(SIOA_C)	;Read RR0
	BIT	0,A		;Check if character is available
	JR	Z,WAIT_RX	;Character not recieved yet, check again

        IN      A,(SIOA_D)      ; A holds recieved character
        
        ; do something with the character
        CALL    KEY_PRESSED

        EXX
        EX      AF,AF'
        EI
	RETI


SPEC_RX_CONDITION:
        JP      $0000

; ***************************************************************************
; Sends the content of register A to SIOA_D.
; ***************************************************************************
OUTC:
	PUSH    AF              ; Store character
WAIT_TXA:        
	SUB     A		; Wait for previous transmission to end
	OUT     (SIOA_C),A
	IN      A,(SIOA_C)
	BIT     2,A             ; Set Zero flag if transmitting a character
	JR      Z,WAIT_TXA      ; Loop if still transmitting character
	BIT	3,A             ; Set zero flag if no data carrier is detected
	JR	Z,WAIT_TXA      ; Loop if no carrier detected.
	BIT	5,A             ; Set zero flag if not clear to send
	JR	Z,WAIT_TXA      ; Loop if not clear to send.
        POP     AF              ; Retrieve character
	OUT     (SIOA_D),A      ; Output the character
	RET


; ***************************************************************************
; Reads SIOA_D into A.
; ***************************************************************************
INPC:
	SUB	A		;Clears A
	OUT	(SIOA_C),A	;Select RR0
	IN	A,(SIOA_C)	;Read RR0
	BIT	0,A		;Check if character is available
	JR	Z,INPC          ;Character not recieved yet, check again
        IN      A,(SIOA_D)      ;A holds recieved character
        RET

#endif
