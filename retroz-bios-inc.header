#if !defined(_PC)

_PC             DEFL    0               ;Parameter counter


;Adds the content of &reg to the stack and increment the _PARAM_COUNT label.
                MACRO   _ADDRP &reg
                PUSH    &reg
_PC             DEFL    {_PC + 1}
                ENDM


;Adds a litteral 16 bits parameter to the stack then increment the
;_PARAM_COUNT label. Register values are preserved.
                MACRO   _ADDLP &lit
                PUSH	HL
                LD      HL,&lit
                EX      (SP),HL
_PC             DEFL    {_PC + 1}
                ENDM


;Macro that calls a procedure &proc. This macro cleans the stack from the
;parameters added with _ADD_PARAM or ADD_LPARAM. Register HL and DE may be
;changed if the subroutine returns respectively a 16(HL) or 32(DEHL) bits 
;value.
                MACRO   _CALL &proc
_PC_&proc       DEFL    {_PC}
_PC             DEFL    0
                CALL    _PUSH
                CALL    &proc
                CALL    _POP
                _CLEANP _PC_&proc
                ENDM


;Recursive macro that cleans &cnt parameters from the stack.
    MACRO   _CLEANP &cnt
    IF &cnt > 0
      EX      (SP),HL
      POP     HL
      _CLEANP {&cnt - 1}
    ENDIF
    ENDM


;Loads the register &reg with the parameter at index &idx
;Since IY is used to get at parameters, its not possible to load
;a parameter into IX or IY using this macro. First parameter is at index 0.
    MACRO   _GETP &reg, &idx
    LD      IY,14
    ADD     IY,SP
    LD      &reg, (IY+{&idx * 2})
    ENDM


;Return the content of &reg1 at the stack position of HL. The content of IY
;can not be returned using this macro.
    MACRO   _RET_HL &reg1
    LD      IY,0
    ADD     IY,SP
    LD      (IY+12),&reg1
    RET
    ENDM



;Return the content of &reg1 at the stack position of HL and the
;content of &reg2 at the DE stack position. The content of IX or IY cannot
;be returned by this macro.
    MACRO   _RET_DEHL &reg1, &reg2
    LD      IY,0
    ADD     IY,SP
    LD      (IY+12),&reg1
    LD      (IY+10),&reg2
    RET
    ENDM


;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                      ;;
;;  BOOLEAN OPERATIONS  ;;
;;                      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

    macro _and
    ; L = H && L
    ; Z matches the boolean value of L.
    ld      a,l         ; prepare the operation
    and     h           ; with h
    ld      l,a         ; get the result in l
    endm

    macro _or
    ; L = H || L
    ; Z matches the boolean value of L.
    ld      a,l         ; prepare the operation
    or      h           ; with h
    ld      l,a         ; get the result in l
    endm


    macro _xor
    ; L = H ^ L
    ; Z matches the boolean value of L.
    ld      a,l         ; prepare the operation
    xor     h           ; with h
    ld      l,a         ; get the result in l
    endm


    macro _not
    ; L = !L
    ; Z matches the boolean value of L.
    ld      a,1         ; prepare the operation
    xor     l           ; A = !L (XOR with 1 inverts the value)
    ld      l,a         ; get the result in l
    endm


    macro _yes
    ; L is unchanged
    ; Z matches the boolean value of L.
    ld      a,l         ; prepare the operation
    or      a           ; Set or reset Z based on L content
    endm



#endif
