#if !defined(MATH_INIT)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                          RetroZ math Library                            ;;
;;                                                                         ;;
;; Version: 0.5.0                                                          ;;
;; https://github.com/formix/RetroZ-bios                                   ;;
;; By J.P. Gravel <jeanphilippe.gravel@gmail.com>                          ;;
;; 2019-10-26                                                              ;;
;;                                                                         ;;
;; This library contains basic math functions.                             ;;
;;                                                                         ;;
;;  - MUL8:      Multiplies two BYTES returns a WORD                       ;;
;;  - MUL16:     Multiplies two WORDS returns a DWORD                      ;;
;;  - DIV16:     Divides two WORDs returns divident in a WORD              ;;
;;  - MOD16:     Divides two WORDs returns the remainder in a WORD         ;;
;;                                                                         ;;
;;  Relies heavily on http://z80-heaven.wikidot.com                        ;;
;;  and the related source code from https://github.com/Zeda/z80float      ;;
;;  Big thanks to these web site and github project autors!                ;;
;;                                                                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


#CODE           _MAIN

MATH_INIT:      RET                     ;Nothing to init



; ***************************************************************************
; Multiply the two byte parameters and return the result in a word.
;       Inputs: Param 0: the two byte values to multiply.
;       Returns: The multiplication result in HL.
;
; I started implementing this myself and ended up copying that code 
; (and comments) from a website I forgot. Quite similar to what I did, 
; except for the stack parameters extraction. If you are the author of these
; lines please email me and I'll give you credit here.
; ***************************************************************************
MUL8:
    _GETP   DE,0
    LD      A,D
    LD      HL,0            ; set accumulator to 0
    LD      D,H             ; (makes adding 'E' to 'accumulator' easier)
MUL8_LOOP:      
    OR      A               ; while a is not 0, then:
    JR      Z,MUL8_END      ; we are done.
    RRA                     ; shift A right, carrying out the bottom bit
    JR      NC,MUL8_SKIP    ; if 1 is carried out:
    ADD     HL,DE           ; add E to the accumulator
MUL8_SKIP:
    SLA     E               ; shift E to the left, shifting in 0.
    RL      D               
    JR      MUL8_LOOP
MUL8_END:
    _RET_HL HL

    
MUL16:
MUL_BC_DE_DEHL:
; BC*DE --> DEHL
;  ~544.887cc as calculated in jacobly's test
; min: 214cc  (DE = 1)
; max: 667cc
; avg: 544.4507883cc  however, deferring to jacobly's result as mine may have
;                     math issues ?
; 177 bytes
; From https://github.com/Zeda/z80float
; This was made by Runer112
; Tested by jacobly
                ld	a,d
                ld	d,0
                ld	h,b
                ld	l,c
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit14
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit13
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit12
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit11
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit10
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit9
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit8
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit7
                ld	a,e
                and	%11111110
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit6
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit5
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit4
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit3
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit2
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit1
                add	a,a
                jr	c,Mul_BC_DE_DEHL_Bit0
                rr	e
                ret	c
                ld	h,d
                ld	l,e
                ret

Mul_BC_DE_DEHL_Bit14:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit13
                add	hl,bc
                adc	a,d
Mul_BC_DE_DEHL_Bit13:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit12
                add	hl,bc
                adc	a,d
Mul_BC_DE_DEHL_Bit12:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit11
                add	hl,bc
                adc	a,d
Mul_BC_DE_DEHL_Bit11:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit10
                add	hl,bc
                adc	a,d
Mul_BC_DE_DEHL_Bit10:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit9
                add	hl,bc
                adc	a,d
Mul_BC_DE_DEHL_Bit9:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit8
                add	hl,bc
                adc	a,d
Mul_BC_DE_DEHL_Bit8:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit7
                add	hl,bc
                adc	a,d
Mul_BC_DE_DEHL_Bit7:
                ld	d,a
                ld	a,e
                and	%11111110
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit6
                add	hl,bc
                adc	a,0
Mul_BC_DE_DEHL_Bit6:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit5
                add	hl,bc
                adc	a,0
Mul_BC_DE_DEHL_Bit5:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit4
                add	hl,bc
                adc	a,0
Mul_BC_DE_DEHL_Bit4:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit3
                add	hl,bc
                adc	a,0
Mul_BC_DE_DEHL_Bit3:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit2
                add	hl,bc
                adc	a,0
Mul_BC_DE_DEHL_Bit2:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit1
                add	hl,bc
                adc	a,0
Mul_BC_DE_DEHL_Bit1:
                add	hl,hl
                adc	a,a
                jr	nc,Mul_BC_DE_DEHL_Bit0
                add	hl,bc
                adc	a,0
Mul_BC_DE_DEHL_Bit0:
                add	hl,hl
                adc	a,a
                jr	c,Mul_BC_DE_DEHL_FunkyCarry
                rr	e
                ld	e,a
                ret	nc
                add	hl,bc
                ret	nc
                inc	e
                ret	nz
                inc	d
                ret

Mul_BC_DE_DEHL_FunkyCarry:
                inc	d
                rr	e
                ld	e,a
                ret	nc
                add	hl,bc
                ret	nc
                inc	e
                ret



; ***************************************************************************
; Divides two WORD parameters and return the remainder in HL.
;       Inputs: divided: WORD, the divided number.
;               divisor: WORD, the divisor number.
;       Outputs: The remainder in HL.
;                The quotien in BC.
; ***************************************************************************
DIV16:
BC_DIVBY_DE:
; Source http://z80-heaven.wikidot.com/advanced-math#toc29
; BC/DE ==> BC, remainder in HL
; NOTE: BC/0 returns 0 as the quotient.
; min: 1072cc
; max: 1232cc
; avg: 1152cc
; 28 bytes
                XOR A
                LD H,A
                LD L,A
                SUB E
                LD E,A
                SBC A,A
                SUB D
                LD D,A
                LD A,B
                LD B,16

DIV16_LOOP:
;shift the bits from BC into HL
                RL C
                RLA
                ADC HL,HL
                ADD HL,DE
                JR C,DIV16_LOOP_DONE
                SBC HL,DE

DIV16_LOOP_DONE:
                DJNZ DIV16_LOOP
                RL C
                RLA
                LD B,A
                RET



#endif
